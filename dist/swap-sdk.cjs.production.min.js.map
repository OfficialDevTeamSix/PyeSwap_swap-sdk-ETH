{"version":3,"file":"swap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  TESTNET = 4\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\ntype ChainAddress = {\r\n  [chainId in ChainId]: string\r\n}\r\nexport const FACTORY_ADDRESS: ChainAddress = {\r\n  [ChainId.MAINNET]: \"0xA2F8f1FAb81300c48208dc0aE540c6675d19f4cd\",\r\n  [ChainId.TESTNET]: \"0xA2F8f1FAb81300c48208dc0aE540c6675d19f4cd\"\r\n}\r\n\r\nexport const INIT_CODE_HASH: ChainAddress = {\r\n  [ChainId.MAINNET]: \"0x7322d196a5476ed6b44fc18910ef3e8a09c2baea2da66bd2cf58f5b3c9dc57ce\",\r\n  [ChainId.TESTNET]: '0x7322d196a5476ed6b44fc18910ef3e8a09c2baea2da66bd2cf58f5b3c9dc57ce'\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _9975 = JSBI.BigInt(9975)\r\nexport const _8575 = JSBI.BigInt(8575)\r\nexport const _10000 = JSBI.BigInt(10000)\r\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'ETH')\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = Currency.ETHER\r\nexport { ETHER }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n  public readonly projectLink?: string\r\n\r\n  public constructor(\r\n    chainId: ChainId,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    projectLink?: string\r\n  ) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n    this.projectLink = projectLink\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped ETH'),\r\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0xc778417e063141139fce010982780140aa0cd5ab', 18, 'WETH', 'Wrapped ETH')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  _10000,\r\n  _9975,\r\n  _8575,\r\n  BigintIsh,\r\n  ChainId,\r\n  FACTORY_ADDRESS,\r\n  FIVE,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  ZERO_ADDRESS\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  public readonly baseToken: string\r\n  public readonly totalFee: JSBI\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.MAINNET): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            // @ts-ignore\r\n            FACTORY_ADDRESS[chainId || tokenA.chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH[chainId || tokenA.chainId]\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, baseToken: string = ZERO_ADDRESS, totalFee = 1400) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, tokenAmounts[0].token.chainId),\r\n      18,\r\n      'PYE-LP',\r\n      'PYESwap-LP'\r\n    )\r\n    this.baseToken = baseToken\r\n    this.totalFee = !baseToken || baseToken === ZERO_ADDRESS ? JSBI.BigInt(\"0\") : JSBI.BigInt(totalFee)\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const fee = this.baseToken === ZERO_ADDRESS ? _9975 : JSBI.subtract(_9975, this.totalFee);\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, fee)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.baseToken, JSBI.toNumber(this.totalFee))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const fee = this.baseToken === ZERO_ADDRESS ? _9975 : JSBI.subtract(_9975, this.totalFee);\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), fee)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.baseToken, JSBI.toNumber(this.totalFee))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n      (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n      (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER\r\n          ? CurrencyAmount.ether(amounts[0].raw)\r\n          : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER\r\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n          : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n          ? currencyOut.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n          ? currencyIn.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Pancake Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pancake Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === ETHER\r\n    const etherOut = trade.outputAmount.currency === ETHER\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IPYESwapPair from './abis/IPYESwapPair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\r\n    const [reserves0, reserves1,, baseToken] = await new Contract(address, IPYESwapPair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), baseToken)\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","TESTNET","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_9975","_10000","ZERO_ADDRESS","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","name","constructor","setPrototypeOf","prototype","_inheritsLoose","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","ETHER","Token","chainId","projectLink","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","baseToken","totalFee","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","fee","inputReserve","outputReserve","inputAmountWithFee","outputAmount","toNumber","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPYESwapPair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}